@using Azure.Core
@using Store.Data.Models
@model Store.ViewModels.ProductListViewModel

<nav class="pt-3 my-3 my-md-3 justify-content-center" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="@Url.Action("Index", "Home")" class="text-color">Главная</a>
        </li>
        <li class="breadcrumb-item active text-color" aria-current="page">
            Каталог товаров
        </li>
    </ol>
</nav>

<!-- Форма поиска -->
<div class="row mb-3">
    <div class="col-md-4 col-sm-6 mb-2">
        <form method="get" action="@Url.Action("List", "Product")" id="searchForm">
            <div class="position-relative">
                <input type="search" name="SearchTerm" id="searchInput" class="rounded-pill form-control bg-custom text-custom" placeholder="Поиск..." value="@Model.SearchTerm" style="padding-right: 40px; height: calc(1.5em + 1rem + 2px);">
                <button type="submit" class="btn btn-icon btn-sm fs-lg rounded-circle position-absolute top-0 end-0 mt-1 me-1 bg-custom text-custom" aria-label="Поиск">
                    <i class="ci-arrow-right text-custom"></i>
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    document.getElementById('searchForm').addEventListener('submit', function (event) {
        const searchInput = document.getElementById('searchInput');
        const searchTerm = searchInput.value.trim(); // Удаляем пробелы с начала и конца

        // Если строка поиска пуста, возвращаемся к исходным данным
        if (searchTerm === '') {
            event.preventDefault(); // Останавливаем отправку формы

            // Перенаправляем пользователя на исходный URL (без параметров)
            window.location.href = '@Url.Action("List", "Product")';
        }
    });
</script>



<!-- Кнопка для открытия формы фильтрации и сброса фильтров -->
<div class="d-flex mb-3">
    <!-- Кнопка для открытия формы фильтрации -->
    <button type="button" class="btn btn-custom" onclick="toggleFilterForm()">
        <i class="fas fa-filter"></i> Фильтры
    </button>

    <!-- Кнопка для сброса фильтров -->
    <button type="button" class="btn btn-custom ms-2" onclick="resetFilters()">Сбросить фильтры</button>
</div>

<!-- Форма фильтрации (скрыта по умолчанию) -->
<div id="filterForm" style="display: none;">
    <form method="get" action="@Url.Action("List", "Product")">
        <div class="row g-3 mb-4" style="font-size: 14px;">
            <!-- Отступы и шрифт -->
            <!-- Фильтр по категориям -->
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <label for="categoryFilter">Категория:</label>
                <select name="categoryId" id="categoryFilter" class="form-select rounded-pill w-100">
                    <option value="">Все категории</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.Id" @(Context.Request.Query["categoryId"] == category.Id.ToString() ? "selected" : "")>
                            @category.Name
                        </option>
                    }
                </select>
            </div>

            <!-- Фильтр по типу продукта -->
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <label for="productTypeFilter">Тип продукта:</label>
                <select name="productType" id="productTypeFilter" class="form-select rounded-pill w-100">
                    <option value="">Все типы</option>
                    @foreach (var type in Enum.GetValues(typeof(ProductType)))
                    {
                        <option value="@type" @(Context.Request.Query["productType"] == type.ToString() ? "selected" : "")>
                            @type
                        </option>
                    }
                </select>
            </div>

            <!-- Фильтр по материалу -->
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <label for="materialFilter">Материал:</label>
                <select name="material" id="materialFilter" class="form-select rounded-pill w-100">
                    <option value="">Все материалы</option>
                    @foreach (var material in Model.Materials)
                    {
                        <option value="@material" @(Context.Request.Query["material"] == material ? "selected" : "")>
                            @material
                        </option>
                    }
                </select>
            </div>

            <!-- Фильтр по стране -->
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <label for="countryFilter">Страна:</label>
                <select name="country" id="countryFilter" class="form-select rounded-pill w-100">
                    <option value="">Все страны</option>
                    @foreach (var country in Model.Countries)
                    {
                        <option value="@country" @(Context.Request.Query["country"] == country ? "selected" : "")>
                            @country
                        </option>
                    }
                </select>
            </div>

            <!-- Сортировка по цене -->
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <label for="sortOrder">Сортировка по цене:</label>
                <select name="sortOrder" id="sortOrder" class="form-select rounded-pill w-100">
                    <option value="">Без сортировки</option>
                    <option value="price_asc" @(Context.Request.Query["sortOrder"] == "price_asc" ? "selected" : "")>По возрастанию</option>
                    <option value="price_desc" @(Context.Request.Query["sortOrder"] == "price_desc" ? "selected" : "")>По убыванию</option>
                </select>
            </div>

            <!-- Фильтр по цене -->
            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <label for="priceMin">Цена от:</label>
                <input type="number" name="priceMin" id="priceMin" class="form-control rounded-pill" value="@Context.Request.Query["priceMin"]" placeholder="от" min="0" />
            </div>

            <div class="col-12 col-sm-6 col-md-4 col-lg-3">
                <label for="priceMax">Цена до:</label>
                <input type="number" name="priceMax" id="priceMax" class="form-control rounded-pill" value="@Context.Request.Query["priceMax"]" placeholder="до" min="0" />
            </div>

            <!-- Кнопка для применения фильтров -->
            <div class="col-12 col-sm-6 col-md-4 col-lg-3 align-self-end">
                <!-- Добавлен класс align-self-end для выравнивания -->
                <button type="submit" class="btn btn-custom rounded-pill">Применить фильтры</button>
            </div>
        </div>
    </form>
</div>

<!-- Скрипты для работы с фильтрами -->
<script>
    // Функция для отображения/скрытия формы фильтрации
    function toggleFilterForm() {
        var form = document.getElementById("filterForm");
        if (form.style.display === "none") {
            form.style.display = "block";
        } else {
            form.style.display = "none";
        }
    }

    // Функция для сброса фильтров
    function resetFilters() {
        // Очистка параметров запроса
        const url = new URL(window.location.href);
        url.searchParams.delete('categoryId');
        url.searchParams.delete('productType');
        url.searchParams.delete('material');
        url.searchParams.delete('country');
        url.searchParams.delete('priceMin');
        url.searchParams.delete('priceMax');
        url.searchParams.delete('sortOrder');

        // Перезагрузка страницы без фильтров
        window.location.href = url.href;
    }
</script>






<div class="row">
    @if (Model.Products != null && Model.Products.Any())
    {
        foreach (var product in Model.Products)
        {
            <div class="col-md-4 mb-4">
                <div class="card h-100 productCard">
                    <!-- Показываем только первое изображение товара -->
                    <a href="@Url.Action("Details", "Product", new { id = product.Id })">
                        @if (product.Images != null && product.Images.Any())
                        {
                            <img src="@product.Images.First().Url" alt="@product.Name" class="card-img-top img-fluid product-image" />
                        }
                        else
                        {
                            <img src="/images/placeholder.png" class="card-img-top img-fluid product-image" alt="Изображение не найдено">
                        }
                    </a>

                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>

                        <!-- Форма для выбора размера -->
                        <div class="form-group">
                            <label for="size-selector-@product.Id">Выберите размер:</label>
                            <select id="size-selector-@product.Id" name="selectedSizeId" class="form-select" onchange="updatePrice(@product.Id, this.value);">
                                @foreach (var variation in product.Variations)
                                {
                                    var isSelected = Model.SelectedVariations.ContainsKey(product.Id) && Model.SelectedVariations[product.Id].Id == variation.Id;
                                    <option value="@variation.Id" @(isSelected ? "selected" : "")>
                                        @variation.Size
                                    </option>
                                }
                            </select>
                        </div>

                        <!-- Отображение цены -->
                        <p class="card-text price-display" id="price-display-@product.Id">
                            <strong>Цена: </strong>
                            @{
                                Variation selectedVariation;
                                if (Model.SelectedVariations.ContainsKey(product.Id))
                                {
                                    selectedVariation = Model.SelectedVariations[product.Id];
                                }
                                else
                                {
                                    selectedVariation = product.Variations.First();
                                }

                                if (selectedVariation.DiscountedPrice.HasValue)
                                {
                                    <strong style="text-decoration: line-through;">
                                        @selectedVariation.Price.ToString("N2") ₽
                                    </strong>
                                    <strong class="text-success">
                                        @selectedVariation.DiscountedPrice.Value.ToString("N2") ₽
                                    </strong>
                                }
                                else
                                {
                                    <strong>@selectedVariation.Price.ToString("N2") ₽</strong>
                                }
                            }
                        </p>

                        <!-- Кнопка "Добавить в корзину" -->
                        <form method="post" action="@Url.Action("AddToCart", "Cart")">
                            <input type="hidden" name="productId" value="@product.Id" />
                            <input type="hidden" name="size" value="@Model.SelectedSize" /> <!-- Например, размер выбран из вариации -->
                            <input type="hidden" name="quantity" value="1" /> <!-- По умолчанию добавляем 1 единицу товара -->

                            <button type="submit" class="btn btn-custom">В корзину</button>
                        </form>

                        <!-- Кнопка "Оформить сейчас" -->
                        <a href="@Url.Action("Checkout", "Order")" class="btn btn-custom">Оформить сейчас</a>

                        <!-- Кнопка "Подробнее" -->
                        <a href="@Url.Action("Details", "Product", new { id = product.Id })" class="btn btn-custom">Подробнее</a>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <p>Нет доступных продуктов.</p>
    }
</div>

<style>
    .product-image {
        width: 100%;
        height: 250px;
        object-fit: cover;
    }
</style>

<script>
    function updatePrice(productId, selectedSizeId) {
        console.log("Updating price for product: ", productId, " and size: ", selectedSizeId); // Отладочный вывод

        $.ajax({
            url: '@Url.Action("GetPrice", "Product")',
            type: 'GET',
            data: { productId: productId, sizeId: selectedSizeId },
            success: function (data) {
                console.log("AJAX Response:", data); // Отладочный вывод ответа
                let priceDisplay = $('#price-display-' + productId);
                priceDisplay.empty();  // очищаем старую цену

                let priceHtml = "<strong>Цена: </strong>";

                if (data.discountedPrice) {
                    priceHtml += `<strong style="text-decoration: line-through;">${data.originalPrice} ₽</strong>`;
                    priceHtml += `<strong class="text-success">${data.discountedPrice} ₽</strong>`;
                } else {
                    priceHtml += `<strong>${data.originalPrice} ₽</strong>`;
                }

                priceDisplay.append(priceHtml);
            },
            error: function (xhr, status, error) {
                console.error("AJAX error:", status, error); // Выводим ошибку в консоль
            }
        });
    }
</script>